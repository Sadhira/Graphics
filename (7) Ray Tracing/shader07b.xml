<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[#version 400 

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexIn;

//Vertex shader compute the vectors per vertex
void main(void)
{
  //Put the vertex in the correct coordinate system by applying the model view matrix
  vec4 vertex_camSpace = mvMatrix*vertex_worldSpace; 
  vertexIn.position_camSpace = vertex_camSpace;
  
  //Apply the model-view transformation to the normal (only rotation, no translation)
  //Normals put in the camera space
  vertexIn.normal_camSpace = normalize(normalMatrix*normal_worldSpace);
  
  //Color chosen as red
  vertexIn.color = vec4(1.0, 0.0, 0.0, 1.0);
  
  //Texture coordinate
  vertexIn.textureCoordinate = textureCoordinate_input;
  
  gl_Position = pMatrix * vertex_camSpace;
}


]]></vertex>
<geom>
<![CDATA[#version 400 

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

in data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexIn[3];

out fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;

void main() {
  for (int i = 0; i < 3; i++) { // You used triangles, so it's always 3
    gl_Position = gl_in[i].gl_Position;
    frag.position_camSpace = vertexIn[i].position_camSpace;
    frag.normal_camSpace = vertexIn[i].normal_camSpace;
    frag.textureCoordinate = vertexIn[i].textureCoordinate;
    frag.color = vertexIn[i].color;
	EmitVertex();
  }
  EndPrimitive();
 }


]]></geom>
<frag>
<![CDATA[#version 400

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;

out vec4 fragColor; 

//Fragment shader computes the final color
void main(void)
{
  fragColor =  frag.color;
}


]]></frag>
<R2TVert>
<![CDATA[#version 150 compatibility
#extension GL_ARB_separate_shader_objects : enable

uniform mat4 mMatrix;
uniform mat4 mvMatrix;

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;

out vec3 origin, dir, point; 

void  main () 
{ 
	vec4 vertex_modelSpace = mMatrix*vertex_worldSpace;
	
    origin =  vec3 ( 0, 0, 0 ); 
    dir = normalize ( vec3 ( vertex_modelSpace.x * 1.6,  vertex_modelSpace.y , -1.0 )); 
	point = vertex_modelSpace.xyz;
	
    gl_Position  = vertex_modelSpace; 
}


]]></R2TVert>
<R2TFrag>
<![CDATA[#version 400

/************************************************************************//*    Graphics 317 coursework exercise 05                               *//*    Author: Bernhard Kainz                                            *//*    This file has to be altered for this exercise                     */
/************************************************************************/

in vec3 origin, dir, point; 
out vec4 outcolour;

#define M_PI 3.1415
#define eps 0.0001
#define specular_exp 10

uniform mat4 mMatrix;
uniform mat4 mvMatrix;
uniform mat4 mvMatrixScene;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

const int raytraceDepth = 8;
const int numSpheres = 6;

struct Ray
{
  vec3 origin;
  vec3 dir;
};

struct Sphere
{
  vec3 centre;
  float radius;
  vec3 colour;
};
struct Plane
{
  vec3 point;
  vec3 normal;
  vec3 colour;
};

struct Intersection
{
  float t;
  vec3 point;     // hit point
  vec3 normal;     // normal
  int hit;
  vec3 colour;
};

////////////////////////////////////////////////////////////////////
// TODO Exercise 5: implement a simple geometry based ray tracing
// implement the functions in the follwing. 
// In order to reach all points you need to implement at least one
// feature more than shown in the coursework description
// effects like refraction, scattering, caustics, soft hadows, etc. 
// are possible. 
////////////////////////////////////////////////////////////////////

void shpere_intersect(Sphere sph, Ray ray, inout Intersection intersect)
{
  ////////////////////////////////////////////////////////////////////
  // TODO 
  ////////////////////////////////////////////////////////////////////
  

  vec3 rs = ray.origin - sph.centre;
  float b = dot(ray.dir, rs);
  float c = dot(rs,rs) - dot(sph.radius, sph.radius);
  float det = dot(b,b) - c;

  if(det >= 0) {
    float mu = -b -sqrt(det);
    if((mu > 0.0) && (mu < intersect.t)) {
      intersect.t = mu;
      intersect.hit = 1;
      intersect.colour = sph.colour;

      vec3 pt = ray.origin + mu*ray.dir;
      intersect.point = pt;
      intersect.normal = normalize(pt - sph.centre);

    } 
  }
}

void plane_intersect(Plane pl, Ray ray, inout Intersection intersect)
{
  ////////////////////////////////////////////////////////////////////
  // TODO 
  ////////////////////////////////////////////////////////////////////
  float dotp = dot(ray.dir, pl.normal);
  bool perp = (abs(dotp) < 0.00001);
  if(perp) {
    return;
  }

  float mu = -dot((ray.origin - pl.point), pl.normal)/dotp;
  
  if((mu > 0.0) && (mu < intersect.t)) {
    intersect.hit = 1;
    intersect.t = mu;
    intersect.normal = pl.normal;

    vec3 pt = ray.origin + mu * ray.dir;
    intersect.point = pt;

    float size = 0.2;
    vec3 d = pt + size;
    if((mod(d.x, 1.0) > 0.5 && mod(d.z, 1.0) > 0.5) ||
      (mod(d.x, 1.0) < 0.5 && mod(d.z, 1.0) < 0.5)){
      intersect.colour = pl.colour;
    } else {
      intersect.colour = pl.colour * 0.5;
    }
  }
  

}

Sphere sphere[numSpheres];
Plane plane;
void Intersect(Ray r, inout Intersection i)
{
  ////////////////////////////////////////////////////////////////////
  // TODO 
  ////////////////////////////////////////////////////////////////////
  for(int j = 0; j < numSpheres; j++) {
    shpere_intersect(sphere[j], r, i);
  }
  plane_intersect(plane, r, i);
}

int seed = 0;
float rnd()
{
  seed = int(mod(float(seed)*1364.0+626.0, 509.0));
  return float(seed)/509.0;
}

vec3 computeShadow(in Intersection inter)
{
  ////////////////////////////////////////////////////////////////////
  // TODO 
  vec3 light_pos = vec3(6,4,3);

  vec3 pt = vec3(inter.point + inter.normal *eps);
  vec3 light_dist = light_pos - pt;
  Ray sh_ray;
  sh_ray.origin = pt;
  sh_ray.dir = normalize(light_dist);

  Intersection sh_inter;
  sh_inter.hit = 0;
  sh_inter.t = 1.0E+30;
  sh_inter.normal = sh_inter.point = sh_inter.colour = vec3(0,0,0);

  Intersect(sh_ray, sh_inter);
  // will be 0 if there is an object blocking light

  vec3 r = normalize(reflect(-sh_ray.dir, inter.normal));
  vec3 e = normalize(sh_ray.dir);
  float u = 0.3;
  float d = distance(sh_ray.origin, light_pos);

  float attenuation = 1.0 / (1.0 + 0.2*d + 0.20*d*d);
  vec3 diffuse_col = 20 * attenuation*inter.colour * dot(inter.normal, sh_ray.dir);
  vec3 specular_col = 20 * attenuation*inter.colour *pow(max(dot(r, e),0), u*specular_exp); 
 
  float shade = 1.0 - sh_inter.hit; 
  float shadow = max(0.0, dot(inter.normal, sh_ray.dir)) * shade;
    
  vec3 outcol = diffuse_col + specular_col;
  return vec3(shadow,shadow,shadow) * outcol;
}

void main()
{
  //initial scene definition
  sphere[0].centre   = vec3(-2.0, 1.5, -3.5);
  sphere[0].radius   = 1.5;
  sphere[0].colour = vec3(0.8,0.8,0.8);
  sphere[1].centre   = vec3(-0.5, 0.0, -2.0);
  sphere[1].radius   = 0.6;
  sphere[1].colour = vec3(0.3,0.8,0.3);
  sphere[2].centre   = vec3(1.0, 0.7, -2.2);
  sphere[2].radius   = 0.8;
  sphere[2].colour = vec3(0.3,0.8,0.8);
  sphere[3].centre   = vec3(0.7, -0.3, -1.2);
  sphere[3].radius   = 0.2;
  sphere[3].colour = vec3(0.8,0.8,0.3);
  sphere[4].centre   = vec3(-0.7, -0.3, -1.2);
  sphere[4].radius   = 0.2;
  sphere[4].colour = vec3(0.8,0.3,0.3);
  sphere[5].centre   = vec3(0.2, -0.2, -1.2);
  sphere[5].radius   = 0.3;
  sphere[5].colour = vec3(0.8,0.3,0.8);
  plane.point = vec3(0,-0.5, 0);
  plane.normal = vec3(0, 1.0, 0);
  plane.colour = vec3(1, 1, 1);
  seed = int(mod(dir.x * dir.y * 39786038.0, 65536.0));
  //scene definition end

  //make empty for exercise 
  //outcolour = vec4(1,1,1,1);

  ////////////////////////////////////////////////////////////////////
  // TODO 
  ////////////////////////////////////////////////////////////////////
  Ray ray;
  vec4 homog = mvMatrixScene * vec4(origin, 1);
  //homog = modelViewMatrix * homog;
  ray.origin =  (homog.xyz + vec3(0,0,2))/homog.w;

	ray.origin += vec3(0.0, 0.0, 30.0);

  ray.dir = normalize(mat3(mvMatrixScene) *dir);

  
  vec3 colour = vec3(0,0,0);
  vec3 acc_col = vec3(1,1,1);

  vec3 mont_colour = vec3(0,0,0);
  Intersection mont_inter;
  Intersection inter;

            
 float counter = 0;

 // increase for better results, but less performance
 const int monte_carlo_rays = 15;
      
  
  for(int j =0; j <raytraceDepth; j++){
    inter.hit = 0;
    inter.t = 1E+30;
    inter.colour = vec3(0,0,0);
    inter.point = vec3(0,0,0);
    inter.normal = vec3(0,0,0);

    Intersect(ray, inter);

    if(inter.hit == 1) {
      // random numbers for monte carlo
      float rand[monte_carlo_rays];
      float sum;
      for(int ind = 0; ind < monte_carlo_rays; ind++) {
        rand[ind] = rnd();
        sum += rand[ind];
      }
      
      for(int pos = 0; pos < rand.length; pos ++) {
        rand[pos] /= sum;
      }

      ///////////////// WITH MONTE CARLO RAY TRACING //////////////////////
      for(int k = 0; k < monte_carlo_rays; k++) {
           
              mont_inter.hit = 0;
              mont_inter.t = 1E+30;
              mont_inter.colour = vec3(0,0,0);
              mont_inter.point = vec3(0,0,0);
              mont_inter.normal = vec3(0,0,0);
              vec3 disp = vec3(rand[k], rand[k], rand[k]);
              Ray disp_ray;
              disp_ray.origin = vec3(inter.point + inter.normal * eps);
              disp_ray.dir = normalize(reflect(ray.dir, inter.normal + disp)) ;
              Intersect(disp_ray, mont_inter);
              if(mont_inter.hit == 1) {
                mont_colour += mont_inter.colour;
                counter++;
              }
          
      }
      if(counter == 0) {
        mont_inter.colour = vec3(1,1,1);
      } else {
        mont_inter.colour = mont_colour / counter;

      }
      
        colour += acc_col * mont_inter.colour * computeShadow(inter);
        acc_col *= inter.colour;
        ray.origin = vec3(inter.point + inter.normal * eps);
        ray.dir = reflect(ray.dir, inter.normal);
    } else {
        break;
    }
    ///////////// WITH MONTE CARLO RAY TRACING ///////////////////////////
   
    /////////////WITHOUT MONTE CARLO RAY TRACINGN ///////////////////////
        /*if(inter.hit == 1) {
          colour += acc_col * inter.colour * computeShadow(inter);
          acc_col *= inter.colour;
          ray.origin = vec3(inter.point + inter.normal * eps);
          ray.dir = reflect(ray.dir, inter.normal);
        } else {
            break;
        }
    }*/
    ////////////////////WITHOUT MONTE CARLO RAY TRACING ///////////////////////
      
}
  outcolour = vec4(colour,1);
}


]]></R2TFrag>
</pipeline>
