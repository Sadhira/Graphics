<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn;

//Vertex shader compute the vectors per vertex
void main(void)
{
    //Put the vertex in the correct coordinate system by applying the model view matrix
    vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;
	vertexIn.position_camSpace = vertex_camSpace;
	
    //Apply the model-view transformation to the normal (only rotation, no translation)
    //Normals put in the camera space
    vertexIn.normal_camSpace = normalize(normalMatrix*normal_worldSpace);

	//Color chosen as red
	vertexIn.color = vec4(1.0,0.0,0.0,1.0);
    
    //Texture coordinate
    vertexIn.textureCoordinate = textureCoordinate_input;
	
    gl_Position = pMatrix * vertex_camSpace;
}




]]></vertex>
<geom>
<![CDATA[#version 400

#extension GL_ARB_geometry_shader4 : enable

#define NVIDIA 0

#if NVIDIA
layout (triangles) in;
layout (triangle_strip) out;
#endif

layout(triangles) in;
layout (triangle_strip, max_vertices = 72) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

uniform int time;
uniform int level;

const float pi = 3.14159265359;

in data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn[3];

out fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;

//Function to simulate randomness
//Random does not exist on the GPU
float rnd(vec2 x)
{
	int n = int(x.x * 40.0 + x.y * 6400.0);
	n = (n << 13) ^ n;
	return 1.0 - float( (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0;
}

void produceVertex(float s, float t, vec4 v0, vec4 v01, vec4 v02, 
						vec3 n0, vec3 n01, vec3 n02, vec2 uv, vec2 uv01, vec2 uv02)
{
	vec4 v = v0 + s*v01 + t*v02;
	vec3 n = n0 + s*n01 + t*n02;
	vec2 textureCoordinate = uv + s*uv01 + t*uv02;
	vec4 color = vertexIn[0].color + s*vertexIn[1].color + t*vertexIn[2].color;

	frag.position_camSpace = v;
	frag.normal_camSpace = normalize(n);
	frag.textureCoordinate = textureCoordinate;
	frag.color = color;
	float disp = rnd(v.xy);

    //Bonus : animation
	//gl_Position = v + vec4(frag.normal_camSpace * disp * sin(time*5.0), 1.0); //bonus task
	
	//non animated object
	gl_Position = v;
	EmitVertex();
}

void main()
{
	int i = 0, j = 0;
	vec4 v0 = gl_in[0].gl_Position;
	vec4 v01 = (gl_in[1].gl_Position- gl_in[0].gl_Position);
	vec4 v02 = (gl_in[2].gl_Position - gl_in[0].gl_Position);

	vec3 n0 = vertexIn[0].normal_camSpace;
	vec3 n01 = (vertexIn[1].normal_camSpace - vertexIn[0].normal_camSpace);
	vec3 n02 = (vertexIn[2].normal_camSpace- vertexIn[0].normal_camSpace);

	vec2 uv = vertexIn[0].textureCoordinate;
	vec2 uv01 = (vertexIn[1].textureCoordinate - vertexIn[0].textureCoordinate);
	vec2 uv02 = (vertexIn[2].textureCoordinate- vertexIn[0].textureCoordinate);

	int numLayers = 1;

	if(level >0)
	{
		numLayers =  numLayers << level;
	}

	float ds = 1.0 / float(numLayers);
	float dt = 1.0 / float(numLayers);

	float s = 0.0;
	for (i = 0 ; i < numLayers ; i++) {
		float t = 0.0;
		for (j = 0 ; j < numLayers-i ; j++) {
			produceVertex(s, t, v0, v01, v02, n0, n01, n02, uv, uv01, uv02);
			produceVertex(s+ds, t, v0, v01, v02, n0, n01, n02, uv, uv01, uv02);
			t += dt;
		}
		produceVertex(s, t, v0, v01, v02, n0, n01, n02,  uv, uv01, uv02);
		s += ds;
		EndPrimitive();
	}
}








]]></geom>
<frag>
<![CDATA[#version 400

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;


out vec4 fragColor;

//Fragment shader compute the final color
void main(void)
{
    fragColor =  frag.color;
}



]]></frag>
<R2TVert>
<![CDATA[#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;

in vec4 vertex_worldSpace;
in vec2 textureCoordinate_input;

out vec2 varyingTextureCoordinate;
	

//Vertex shader compute the vectors per vertex
void main(void)
{
    //Put the vertex in the correct coordinate system by applying the model view matrix
    vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;

	varyingTextureCoordinate = textureCoordinate_input;
    gl_Position = pMatrix * vertex_camSpace;
}




]]></R2TVert>
<R2TFrag>
<![CDATA[#version 400

uniform sampler2D textureRendered;

in vec2 varyingTextureCoordinate;

out vec4 fragColor;

void main(void)
{

	//Render the texture on a quad
	fragColor = texture2D(textureRendered, varyingTextureCoordinate.st);
}





]]></R2TFrag>
</pipeline>
